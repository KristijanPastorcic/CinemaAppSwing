/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package hr.kpastorcic11.panels;

import hr.algebra.utilities.MessageUtils;
import hr.kpastorcic11.factories.RepositoryFactory;
import hr.kpastorcic11.models.Movie;
import hr.kpastorcic11.parsers.rss.cinestar.CinestarRSSParser;
import hr.kpastorcic11.repositories.interfaces.MoviesRepository;
import hr.kpastorcic11.repositories.sql.MSqlAuthRepository;
import java.io.IOException;
import java.sql.SQLException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.SwingUtilities;

/**
 *
 * @author islan
 */
public class AdminPanel extends javax.swing.JPanel {

    MoviesRepository moviesRepository;
    private DefaultListModel<Movie> movieListModel;

    /**
     * Creates new form AdminPanel
     */
    public AdminPanel() {
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnCleanDB = new javax.swing.JButton();
        btnUploadRSS = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        lsMovies = new javax.swing.JList<>();
        pbUpload = new javax.swing.JProgressBar();
        lbProgress = new javax.swing.JLabel();

        btnCleanDB.setText("clean DB");
        btnCleanDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCleanDBActionPerformed(evt);
            }
        });

        btnUploadRSS.setText("upload Movies from rss");
        btnUploadRSS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUploadRSSActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(lsMovies);

        pbUpload.setMaximum(69);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pbUpload, javax.swing.GroupLayout.PREFERRED_SIZE, 803, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbProgress, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(btnUploadRSS)
                        .addGap(18, 18, 18)
                        .addComponent(btnCleanDB))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 710, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lbProgress, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnCleanDB)
                        .addComponent(btnUploadRSS))
                    .addComponent(pbUpload, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnUploadRSSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUploadRSSActionPerformed
        new Thread(() -> {
            try {
                List<Movie> movies = CinestarRSSParser.getMovies(pbUpload, lbProgress, true);
                moviesRepository.importMovies(movies);
                SwingUtilities.invokeLater(() -> {
                    loadModel();
                    pbUpload.setValue(0);
                    lbProgress.setText("");
                });
            } catch (Exception ex) {
                MessageUtils.showErrorMessage("Error", "Can't upload movies at th emoment");
                Logger.getLogger(AdminPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }).start();
    }//GEN-LAST:event_btnUploadRSSActionPerformed

    private void btnCleanDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCleanDBActionPerformed
        try {
            // delete all in db
            MSqlAuthRepository.cleanDB();
            loadModel();
        } catch (SQLException | IOException ex) {
            Logger.getLogger(AdminPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_btnCleanDBActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCleanDB;
    private javax.swing.JButton btnUploadRSS;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbProgress;
    private javax.swing.JList<Movie> lsMovies;
    private javax.swing.JProgressBar pbUpload;
    // End of variables declaration//GEN-END:variables

    private void init() {
        moviesRepository = RepositoryFactory.getMoviesRepository();
        movieListModel = new DefaultListModel<>();
        loadModel();
    }

    private void loadModel() {
        try {
            movieListModel.clear();
            List<Movie> movies = moviesRepository.getMovies();
            movies.forEach(movieListModel::addElement);
            lsMovies.setModel(movieListModel);
        } catch (Exception ex) {
            MessageUtils.showErrorMessage("Error geting movies", "Can't get movies");
            Logger.getLogger(AdminPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
